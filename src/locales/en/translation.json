{
  "app": {
    "title": "JSONGeeks - Developer Tools for JSON Processing",
    "description": "Professional JSON utilities built by developers for developers. Format, validate, compare, convert, query, and visualize JSON data with these powerful online tools.",
    "header": "JSONGeeks Professional Tools",
    "backToHome": "Open Tools"
  },
  "theme": {
    "toggleLight": "Switch to Light Mode",
    "toggleDark": "Switch to Dark Mode",
    "toggle": "Toggle Theme"
  },
  "language": {
    "toggle": "Change Language",
    "english": "English",
    "chinese": "中文",
    "german": "Deutsch"
  },
  "tabs": {
    "format": "Format",
    "compare": "Compare",
    "convert": "Convert",
    "visualize": "Visualize",
    "validate": "Validate",
    "query": "Query",
    "codeGenerator": "Code Generator",
    "apiMocker": "API Mocker",
    "jwtDecoder": "JWT Processor",
    "jsonEditor": "JSON Editor",
    "jsonCrypto": "JSON Crypto",
    "sort": "Sort",
    "faq": "FAQ"
  },
  "sort": {
    "title": "JSON Sorter Tool",
    "description": "Use this professional JSON sorting tool to sort JSON objects by keys, supporting ascending, descending, or custom sorting methods. Perfect for creating standardized JSON outputs, improving readability, and facilitating comparisons. The recursive sorting feature handles complex nested JSON structures with ease.",
    "keywords": [
      "JSON sorter",
      "Key sorting",
      "JSON object sort",
      "Recursive sorting",
      "Data standardization",
      "Nested JSON sorting",
      "Sort by key",
      "JSON structuring",
      "JSON comparison",
      "Alphabetical sorting"
    ],
    "indent": "Indent",
    "spaces": "{{count}} spaces",
    "sort": "Sort",
    "sortMethod": "Sort Method",
    "sortAsc": "Keys Ascending",
    "sortDesc": "Keys Descending",
    "sortKeys": "Keys Only",
    "sortArrays": "Sort Arrays",
    "yes": "Yes",
    "no": "No",
    "minify": "Minify",
    "download": "Download",
    "upload": "Upload",
    "loadTestData": "Load Test Data",
    "useTreeView": "Use Tree View (Collapsible)",
    "collapseLevel": "Collapse Level",
    "level": "Level",
    "all": "All Expanded",
    "resetView": "Reset View",
    "enterJson": "Enter JSON...",
    "paste": "Paste",
    "copy": "Copy",
    "feature1": "Multiple Sorting Options",
    "feature1.description": "Support for sorting by keys in ascending or descending order, as well as sorting array elements",
    "feature2": "Recursive Sorting",
    "feature2.description": "Intelligently handles deeply nested JSON structures, ensuring consistent sorting throughout the document",
    "feature3": "Array Processing Control",
    "feature3.description": "Option to include or exclude arrays from sorting, providing flexibility for different scenarios",
    "feature4": "Formatted Output",
    "feature4.description": "Automatically formats output after sorting, with customizable indentation for improved readability",
    "feature5": "One-Click Minification",
    "feature5.description": "Easily minify sorted JSON for reduced file size, ideal for production environments",
    "shortDescription": "Sort JSON objects by keys with multiple sorting methods and recursive sorting support"
  },
  "format": {
    "title": "JSON Formatter & Beautifier",
    "description": "Format and beautify your JSON data with this easy-to-use tool. Improve readability with customizable indentation, validate JSON syntax, and quickly minify for production use. Upload from file or paste directly, then download or copy the formatted result.",
    "keywords": [
      "JSON formatter",
      "JSON beautifier",
      "JSON validator",
      "JSON minifier",
      "Indent JSON",
      "Format JSON",
      "Readable JSON",
      "JSON syntax"
    ],
    "indent": "Indent",
    "spaces": "{{count}} spaces",
    "format": "Format",
    "minify": "Minify",
    "download": "Download",
    "upload": "Upload",
    "enterJson": "Enter JSON...",
    "paste": "Paste",
    "copy": "Copy",
    "zoomIn": "Zoom In",
    "zoomOut": "Zoom Out",
    "fullscreen": "Fullscreen View",
    "feature1": "Smart JSON Formatting",
    "feature1.description": "Automatically detects and formats JSON with configurable indentation",
    "feature2": "Minification Option",
    "feature2.description": "Compress JSON to reduce file size for production use",
    "feature3": "Syntax Highlighting",
    "feature3.description": "Color-coded output makes JSON structure easier to read",
    "feature4": "Error Detection",
    "feature4.description": "Identifies and highlights syntax errors in your JSON with helpful messages",
    "shortDescription": "Format, beautify and validate your JSON data with configurable options"
  },
  "compare": {
    "title": "JSON Diff & Compare Tool",
    "description": "Compare two JSON objects and visualize the differences. Perfect for API testing, debugging response variations, and tracking changes in JSON data structures. This tool provides a detailed list of additions, deletions, and modifications between JSON objects.",
    "keywords": [
      "JSON diff",
      "JSON compare",
      "JSON difference",
      "API testing",
      "Object comparison",
      "Data comparison",
      "JSON changes",
      "JSON delta"
    ],
    "firstJson": "Enter first JSON...",
    "secondJson": "Enter second JSON...",
    "compare": "Compare",
    "result": "Comparison result copied to clipboard!",
    "feature1": "Side-by-side Comparison",
    "feature1.description": "View two JSON objects next to each other with clear highlighting",
    "feature2": "Difference Detection",
    "feature2.description": "Automatically identify added, removed, and changed values",
    "feature3": "Nested Object Support",
    "feature3.description": "Compare complex nested structures with precise difference tracking",
    "shortDescription": "Compare two JSON objects and visualize the differences between them"
  },
  "convert": {
    "title": "JSON Converter - XML, CSV, YAML Conversion Tool",
    "description": "Convert JSON data to and from different formats including YAML, XML, and CSV. This versatile tool offers customizable options for indentation, headers, and data formatting to meet your specific conversion needs. Perfect for data migration, API integrations, and format transformations.",
    "keywords": [
      "JSON to YAML",
      "JSON to XML",
      "JSON to CSV",
      "YAML to JSON",
      "Format conversion",
      "Data transformation",
      "API integration",
      "Data export"
    ],
    "jsonToYaml": "JSON → YAML",
    "yamlToJson": "YAML → JSON",
    "jsonToXml": "JSON → XML",
    "jsonToCsv": "JSON → CSV",
    "options": "Conversion Options",
    "prettyPrint": "Pretty Print",
    "xmlHeader": "XML Header",
    "includeHeader": "Include Header",
    "flattenObjects": "Flatten Objects",
    "delimiter": "Delimiter",
    "enterJson": "Enter JSON...",
    "enterYaml": "Enter YAML...",
    "convert": "Convert",
    "result": "Converted output copied to clipboard!",
    "feature1": "Multiple Format Support",
    "feature1.description": "Convert between JSON, YAML, XML, CSV, and other formats",
    "feature2": "Two-way Conversion",
    "feature2.description": "Convert to and from JSON with a single click",
    "feature3": "Customizable Output",
    "feature3.description": "Configure conversion options to match your requirements",
    "feature4": "Instant Preview",
    "feature4.description": "See the conversion results in real-time as you type",
    "shortDescription": "Convert JSON to and from other formats including YAML, XML and CSV"
  },
  "visualize": {
    "title": "JSON Visualization Tool",
    "description": "Visualize your JSON data with interactive charts. Transform complex data structures into insightful visual representations. Support for bar charts, line charts, pie charts, and more - perfect for data analysis and presentation.",
    "keywords": [
      "JSON visualization",
      "Data visualization",
      "JSON charts",
      "Data charts",
      "JSON graphs",
      "Data presentation",
      "API visualization",
      "JSON data analysis"
    ],
    "jsonData": "JSON Data",
    "enterJson": "Enter JSON data here...",
    "loadExample": "Load Examples",
    "examples": "Example Data:",
    "exampleData": {
      "example1": "Example 1 - Simple Data",
      "example2": "Example 2 - Multi-series Data",
      "example3": "Example 3 - Nested Data"
    },
    "visualize": "Generate Chart",
    "chartUpdated": "Chart updated",
    "chartOptions": "Chart Configuration",
    "chartType": "Chart Type",
    "barChart": "Bar Chart",
    "lineChart": "Line Chart",
    "pieChart": "Pie Chart",
    "donutChart": "Donut Chart",
    "areaChart": "Area Chart",
    "stackedBarChart": "Stacked Bar Chart",
    "scatterChart": "Scatter Plot",
    "radarChart": "Radar Chart",
    "treemapChart": "Treemap Chart",
    "xAxisField": "X-Axis Field",
    "yAxisField": "Y-Axis Field",
    "colorField": "Color Field",
    "category": "category",
    "numeric": "numeric",
    "enableMultiSeries": "Enable Multi-series",
    "multiSeriesEnabled": "Multi-series Enabled",
    "selectDataSeries": "Select Data Series",
    "selectFields": "Please select X and Y fields",
    "selectSeries": "Please select at least one data series",
    "noDataPoints": "No valid data points to visualize",
    "chart": "Chart Results",
    "feature1": "Interactive Tree View",
    "feature1.description": "Explore JSON hierarchies with an expandable tree structure",
    "feature2": "Graph Visualization",
    "feature2.description": "Visualize relationships between JSON elements with interactive graphs",
    "feature3": "Copy Path Feature",
    "feature3.description": "Easily get the path to any element in complex JSON structures",
    "shortDescription": "Visualize JSON data as interactive trees, charts, and graphs"
  },
  "validate": {
    "title": "JSON Schema Validator",
    "description": "Validate your JSON data against JSON Schema to ensure data integrity and structure. This tool helps developers verify that JSON payloads conform to predefined schemas, catching errors and ensuring data quality before integration or API usage.",
    "keywords": [
      "JSON validation",
      "Schema validation", 
      "API testing",
      "Data validation",
      "JSON Schema",
      "JSON format",
      "Data integrity"
    ],
    "jsonData": "JSON Data",
    "jsonSchema": "JSON Schema",
    "dataExamples": "Data Examples",
    "schemaTemplates": "Schema Templates",
    "selectExample": "Select an example",
    "selectTemplate": "Select a template",
    "enterJsonData": "Enter JSON data...",
    "enterJsonSchema": "Enter JSON Schema...",
    "validate": "Validate",
    "validResult": "Validation Passed",
    "invalidResult": "Validation Failed",
    "errorsFound": "Found {{count}} errors",
    "atPath": "At path:",
    "errorDetails": "Error Details",
    "errorType": "Error Type",
    "path": "Path",
    "message": "Message",
    "receivedValue": "Received Value",
    "expectedSchema": "Expected Schema",
    "enterBoth": "Please enter both JSON data and schema",
    "jsonValid": "JSON is valid according to the schema!",
    "jsonInvalid": "JSON is invalid according to the schema",
    "invalidValue": "Invalid value",
    "invalidFormat": "Invalid JSON or schema format",
    "templateDataLoaded": "Schema template and matching example data loaded: {{name}}",
    "templateLoaded": "Schema template loaded",
    "dataTemplateLoaded": "Example data and matching schema template loaded: {{name}}",
    "dataLoaded": "Example data loaded",
    "validationResult": "validation result",
    "learnJsonSchema": "Learn JSON Schema",
    "schemaDescription": "JSON Schema is a declarative language for validating JSON data. You can define the format, required fields, and data types, then validate whether JSON data meets these rules.",
    "documentation": "Documentation",
    "tutorial": "Tutorial",
    "templateExamples": {
      "genericObject": "Generic Object",
      "userList": "User List",
      "configObject": "Configuration Object"
    },
    "feature1": "JSON Schema Validation",
    "feature1.description": "Validate JSON data against JSON Schema (draft-07)",
    "feature2": "Detailed Error Reports",
    "feature2.description": "Get precise information about validation failures",
    "feature3": "Schema Builder",
    "feature3.description": "Create and edit JSON schemas with an interactive interface",
    "shortDescription": "Validate JSON data against JSON Schema with detailed error reporting"
  },
  "query": {
    "title": "JSONPath Query Tool - Extract Data from JSON",
    "description": "Query and extract specific data from complex JSON structures using JSONPath expressions. This powerful tool allows you to navigate and filter JSON data with precise path syntax, ideal for API response analysis, data extraction, and JSON processing workflows.",
    "keywords": [
      "JSONPath",
      "JSON query",
      "JSON extraction",
      "JSON filter",
      "JSON navigator",
      "API response parser",
      "JSON data select",
      "Path expressions"
    ],
    "guide": {
      "title": "JSONPath Quick Guide",
      "showGuide": "Show Guide",
      "hideGuide": "Hide Guide",
      "loadExample": "Load Test Data",
      "try": "Click on any example below to try it out",
      "dataStructure": "Example Data Structure:",
      "syntax": "JSONPath Syntax Reference:",
      "root": "Represents the root object",
      "child": "Represents child elements, e.g., $.store.book accesses the book property under store",
      "array": "Accesses the nth element of an array, e.g., $.store.book[0] accesses the first book",
      "allItems": "Represents all elements in an array, e.g., $.store.book[*].title returns all book titles",
      "filter": "Filters elements based on conditions, e.g., $.store.book[?(@.price<10)] returns books with price less than 10",
      "returnRoot": "Returns the entire JSON object",
      "returnStore": "Returns the store object and all its contents",
      "returnAllBooks": "Returns all objects in the books array",
      "returnFirstBook": "Returns all information about the first book",
      "returnAllTitles": "Returns all book titles, e.g., [\"Harry Potter\",...]",
      "returnInStock": "Returns all books where inStock is true",
      "filterExample": "[?(condition)]"
    },
    "examples": "Try These Examples",
    "example1": "Get entire data",
    "example2": "Get store object",
    "example3": "Get all books",
    "example4": "Get first book",
    "example5": "Get second book",
    "example6": "Get first book title",
    "example7": "Get all book titles",
    "example8": "Get all book authors",
    "example9": "Get in-stock books",
    "example10": "Get books over $10",
    "example11": "Get books under $10",
    "example12": "Get bicycle details",
    "example13": "Get store location",
    "jsonData": "JSON Data",
    "jsonPath": "JSONPath Query",
    "executeQuery": "Execute Query",
    "results": "Query Results",
    "type": "Type",
    "recentQueries": "Recent Queries",
    "noResults": "No results found",
    "invalidQuery": "Invalid JSON or query format",
    "feature1": "JSONPath Support",
    "feature1.description": "Query JSON using the powerful JSONPath syntax",
    "feature2": "Live Results",
    "feature2.description": "See query results update instantly as you type",
    "feature3": "Query Examples",
    "feature3.description": "Learn from pre-built example queries for common tasks",
    "shortDescription": "Extract specific data from JSON using JSONPath queries"
  },
  "codeGenerator": {
    "title": "JSON to Code Generator",
    "description": "Generate programming language code from JSON data. Instantly convert JSON into classes, interfaces, or models in TypeScript, Java, C#, Python, Go, or Swift. Save time on data model creation with customizable options for property names, types, and annotations.",
    "keywords": [
      "JSON to code",
      "Code generator",
      "TypeScript interface",
      "Java class",
      "C# model",
      "Python class",
      "Swift struct",
      "Go struct",
      "Data model",
      "JSON deserialize"
    ],
    "targetLanguage": "Target Language",
    "rootClassName": "Root Class Name",
    "generate": "Generate Code",
    "upload": "Upload JSON",
    "options": "Code Generation Options",
    "useInterfaces": "Use Interfaces",
    "useClasses": "Use Classes",
    "optionalProps": "Optional Properties",
    "requiredProps": "Required Properties",
    "useJsonAnnotations": "Use JSON Annotations",
    "noJsonAnnotations": "No JSON Annotations",
    "jsonInput": "JSON Input",
    "generatedCode": "Generated Code",
    "noCodeGenerated": "No code has been generated yet. Enter JSON data and click Generate.",
    "feature1": "Multiple Language Support",
    "feature1.description": "Generate code for JavaScript, TypeScript, Python, Java, C#, and more",
    "feature2": "Type Definitions",
    "feature2.description": "Automatically generate type definitions based on your JSON structure",
    "feature3": "Customizable Output",
    "feature3.description": "Configure naming conventions and code style options",
    "shortDescription": "Generate code classes and types from JSON data in multiple languages"
  },
  "apiMocker": {
    "title": "API Mocker - Create Mock API Responses",
    "description": "Create mock API responses based on JSON Schema. Define response delay, error rate, and other parameters to simulate real-world API behavior. Perfect for frontend developers working with APIs that aren't yet complete or available.",
    "keywords": [
      "API mocking",
      "Mock server",
      "API testing",
      "Frontend development",
      "JSON Schema",
      "API simulation",
      "Fake API",
      "Backend simulation"
    ],
    "labels": {
      "endpoints": "API Endpoints",
      "selectEndpoint": "Select Endpoint",
      "createEndpoint": "Create New Endpoint",
      "editEndpoint": "Edit Endpoint",
      "endpointName": "Endpoint Name",
      "jsonSchema": "JSON Schema",
      "mockResult": "Mock API Response",
      "responseSettings": "Response Settings",
      "delay": "Response Delay",
      "errorRate": "Error Rate",
      "successStatus": "Success Status Code",
      "errorStatus": "Error Status Code",
      "enabled": "Enabled",
      "disabled": "Disabled",
      "mockServer": "Mock Server",
      "serverPort": "Server Port",
      "headers": "Response Headers",
      "availableEndpoints": "Available Endpoints",
      "schemaExamples": "Schema Examples",
      "responsePreview": "Response Preview",
      "statusCode": "Status Code"
    },
    "buttons": {
      "saveEndpoint": "Save Endpoint",
      "generateMock": "Generate Mock Response",
      "copyMock": "Copy Response",
      "newEndpoint": "New Endpoint",
      "startServer": "Start Mock Server",
      "stopServer": "Stop Server"
    },
    "placeholders": {
      "enterSchema": "Enter JSON Schema here...",
      "enterEndpointName": "e.g., users, products, etc."
    },
    "messages": {
      "endpointCreated": "Endpoint created successfully",
      "endpointUpdated": "Endpoint updated successfully",
      "endpointDeleted": "Endpoint deleted",
      "dataCopied": "Mock response copied to clipboard",
      "serverStarted": "Mock server started on port {{port}}",
      "serverStopped": "Mock server stopped",
      "serverRunning": "Server running at http://localhost:{{port}}",
      "noEndpoints": "No endpoints defined yet. Create one using the form below.",
      "noMockData": "No mock data generated yet. Enter JSON Schema and click Generate.",
      "noEnabledEndpoints": "No enabled endpoints. Please enable at least one endpoint.",
      "schemaExampleLoaded": "{{name}} example schema loaded",
      "noPreviewData": "Unable to generate preview data"
    },
    "errors": {
      "nameRequired": "Endpoint name is required",
      "invalidSchema": "Invalid JSON Schema format",
      "saveFailed": "Failed to save endpoint",
      "generationFailed": "Failed to generate mock data",
      "noDataToCopy": "No mock data to copy",
      "invalidPastedSchema": "Invalid JSON format in pasted content",
      "serverStartFailed": "Failed to start mock server",
      "loadExampleFailed": "Failed to load example"
    },
    "examples": {
      "user": "User Profile",
      "product": "Product Catalog",
      "order": "Order Details",
      "weather": "Weather Forecast"
    },
    "feature1": "Mock API Endpoints",
    "feature1.description": "Create simulated API endpoints with custom JSON responses",
    "feature2": "Response Templates",
    "feature2.description": "Use templates to generate dynamic mock data",
    "feature3": "Request Validation",
    "feature3.description": "Validate incoming requests against expected formats",
    "shortDescription": "Create mock API endpoints with custom JSON responses for testing"
  },
  "jwtDecoder": {
    "title": "JWT Decoder",
    "info": "JWT (JSON Web Token) is an open standard used to securely transmit information between parties",
    "encoded": "Encoded JWT",
    "placeholder": "Paste your JWT here...",
    "noData": "Enter a JWT to see decoded results",
    "tabs": {
      "decoded": "Decoded",
      "payload": "Payload",
      "header": "Header"
    },
    "tokenInfo": {
      "title": "Token Information",
      "issuer": "Issuer",
      "expiresIn": "Expires In",
      "issuedAt": "Issued At",
      "subject": "Subject",
      "audience": "Audience"
    },
    "verification": {
      "toggle": "Verify Signature",
      "title": "Signature Verification",
      "placeholder": "Enter secret key (min 256 bits)",
      "verify": "Verify Signature"
    },
    "errors": {
      "invalidToken": "Invalid JWT format",
      "noToken": "Please enter a JWT",
      "noSecret": "Please enter a verification key"
    },
    "messages": {
      "verificationSuccess": "Signature verification successful",
      "verificationFailed": "Signature verification failed",
      "copied": "{{type}} copied to clipboard"
    },
    "generateSample": "Generate Sample",
    "description": "Decode and verify JSON Web Tokens (JWT). Supports all standard algorithms, signature verification, and detailed token information display.",
    "keywords": [
      "JWT Decoding",
      "JWT Verification",
      "Token Analysis",
      "JWT Signature",
      "Token Validation",
      "JWT Analysis",
      "Token Inspection",
      "JWT Debugging"
    ],
    "timestamps": "Timestamps (Local Time)",
    "hours": "hours"
  },
  "jsonEditor": {
    "title": "Advanced JSON Editor",
    "description": "A full-featured JSON editor with syntax highlighting, auto-completion, and auto-formatting features. Edit your JSON data directly with real-time validation and intelligent code assistance.",
    "keywords": [
      "JSON editor",
      "JSON IDE",
      "Code editor",
      "Syntax highlighting",
      "Auto-completion",
      "JSON validator",
      "JSON development"
    ],
    "loadSample": "Load Sample",
    "format": "Format JSON",
    "copy": "Copy",
    "paste": "Paste",
    "download": "Download",
    "upload": "Upload",
    "undo": "Undo",
    "redo": "Redo",
    "editorSettings": "Editor Settings",
    "settings": {
      "autoClosingBrackets": "Auto-close brackets",
      "autoClosingQuotes": "Auto-close quotes",
      "formatOnPaste": "Format on paste",
      "formatOnType": "Format as you type"
    },
    "formatSuccess": "JSON formatted successfully",
    "pasteSuccess": "Content pasted from clipboard",
    "uploadSuccess": "JSON file loaded successfully",
    "downloadSuccess": "JSON file downloaded successfully",
    "sampleLoaded": "Sample JSON loaded",
    "feature1": "Smart Editor",
    "feature1.description": "Advanced editing with syntax highlighting and code folding",
    "feature2": "Auto-completion",
    "feature2.description": "Intelligent suggestions for JSON properties and values",
    "feature3": "Real-time Validation",
    "feature3.description": "Immediate feedback on JSON syntax errors",
    "feature4": "Customizable Editor",
    "feature4.description": "Configure editor features to match your workflow",
    "shortDescription": "Edit JSON with syntax highlighting, auto-completion and real-time validation"
  },
  "jsonCrypto": {
    "title": "JSON Encryption & Decryption Tool",
    "description": "Securely encrypt and decrypt your JSON data using strong encryption algorithms. Protect sensitive information in your JSON files with customizable encryption settings and secure key management.",
    "keywords": [
      "JSON encryption",
      "JSON decryption",
      "Data security",
      "AES encryption",
      "Secure JSON",
      "JSON protection",
      "Encrypted data",
      "Cryptography"
    ],
    "algorithm": "Encryption Algorithm",
    "secretKey": "Secret Key",
    "generateKey": "Generate Key",
    "uploadKey": "Upload Key",
    "showKey": "Show Key",
    "hideKey": "Hide Key",
    "pasteKey": "Paste Key",
    "preserveFormatting": "Preserve JSON Formatting",
    "includeMetadata": "Include Encryption Metadata",
    "jsonInput": "JSON Input",
    "enterJson": "Enter JSON data to encrypt...",
    "encryptedOutput": "Encrypted Output",
    "decryptedOutput": "Decrypted Output",
    "encryptedPlaceholder": "Encrypted data will appear here...",
    "decryptedPlaceholder": "Decrypted JSON will appear here...",
    "encrypt": "Encrypt",
    "decrypt": "Decrypt",
    "encryptedData": "encrypted data",
    "switchToDecrypt": "Switch to Decrypt Mode",
    "switchToEncrypt": "Switch to Encrypt Mode",
    "useForEncryption": "Use for Encryption",
    "readyToEncrypt": "JSON ready for encryption",
    "loadSample": "Load Sample",
    "copy": "Copy",
    "paste": "Paste",
    "download": "Download",
    "upload": "Upload",
    "keyGenerated": "Random key generated successfully",
    "encryptSuccess": "JSON encrypted successfully",
    "decryptSuccess": "Data decrypted successfully",
    "pasteSuccess": "Content pasted from clipboard",
    "uploadSuccess": "File loaded successfully",
    "downloadSuccess": "File downloaded successfully",
    "sampleLoaded": "Sample JSON loaded",
    "securityTip": "Security Tip: For maximum security, never share your encryption key in the same channel as your encrypted data. Use a separate secure channel for key exchange.",
    "errors": {
      "noKey": "Secret key is required for encryption/decryption",
      "encryptFailed": "Failed to encrypt JSON data",
      "decryptFailed": "Failed to decrypt data. Check your key and algorithm."
    },
    "feature1": "Multiple Encryption Algorithms",
    "feature1.description": "Support for AES, DES, Triple DES, Rabbit, and RC4 encryption algorithms",
    "feature2": "Secure Key Management",
    "feature2.description": "Generate random secure keys and safely manage them for encryption/decryption",
    "feature3": "Metadata Preservation",
    "feature3.description": "Option to include encryption metadata for easier decryption and algorithm detection",
    "feature4": "Format Preservation",
    "feature4.description": "Maintain JSON formatting and structure through the encryption/decryption process",
    "shortDescription": "Securely encrypt and decrypt JSON data with multiple encryption algorithms",
    "encryptedInput": "Encrypted Input",
    "useForDecryption": "Use for Decryption",
    "readyToDecrypt": "Data ready for decryption"
  },
  "faq": {
    "title": "JSONGeeks - Frequently Asked Questions",
    "description": "Find answers to common questions about JSON and our tools. This FAQ page provides detailed guides, troubleshooting tips, and best practices to help you work more effectively with JSON data and our suite of tools.",
    "keywords": {
      "format1": ["Format", "Indentation", "Readability", "Prettify", "Spaces"],
      "format2": ["Minify", "Compress", "File Size", "Remove Whitespace"],
      "format3": ["Save", "Download", "Copy", "Share", "File"],
      "compare1": ["Compare", "Difference", "Diff", "File Comparison"],
      "compare2": ["Color Code", "Add", "Remove", "Change", "Modification"],
      "convert1": ["JSON to CSV", "Convert", "Table", "Excel"],
      "convert2": ["JSON to XML", "XML", "Markup", "Nested"],
      "convert3": ["YAML", "YAML to JSON", "Config File", "Readability"],
      "validate1": ["Validate", "JSON Schema", "Schema", "Rules", "Structure"],
      "validate2": ["Error", "Invalid JSON", "Troubleshooting", "Debug", "Syntax"],
      "query1": ["JSONPath", "Query", "Extract", "Search", "Selector"],
      "query2": ["Complex Query", "Filter", "Array", "Condition", "Nested Data"],
      "code1": ["Code Generation", "Class", "Interface", "TypeScript", "Java", "C#"],
      "code2": ["Naming Convention", "camelCase", "snake_case", "PascalCase", "Property Name"],
      "mock1": ["API Mocking", "Testing", "Mock Data", "Endpoint", "Fake Data"],
      "mock2": ["Schema", "Template", "Data Generation", "Random", "Test"],
      "visualize1": ["Visualization", "Chart", "Data Display", "Analysis", "Graph"],
      "jwt1": ["JWT", "JSON Web Token", "Token", "Authentication", "Authorization"],
      "jwt2": ["JWT Structure", "Header", "Payload", "Signature", "Sign"],
      "jwt3": ["JWT Validation", "Signature Verification", "Verify", "Security", "Key"],
      "jwt4": ["JWT Use Case", "Best Practice", "Use Case", "Application", "Stateless"],
      "general1": ["Security", "Privacy", "Data", "Client", "Server"],
      "general2": ["Large File", "Performance", "Processing", "Limit", "Browser"]
    },
    "pageKeywords": ["JSON FAQ", "JSON Questions", "JSON Help", "JSON Tutorial", "JSON Guide", "JSON Tool Usage"],
    "searchPlaceholder": "Search FAQ...",
    "searchResults": "Found {{count}} results",
    "quickLinks": "Quick Links",
    "additionalResources": "Additional Resources",
    "resourcesDescription": "The following resources provide more in-depth information about JSON and related technologies:",
    "jsonSpecification": "JSON Specification",
    "jsonSchemaDoc": "JSON Schema Documentation",
    "jsonPathDoc": "JSONPath Syntax Guide",
    
    "questions": {
      "format1": "How do I format JSON to improve readability?",
      "format2": "How can I minify JSON to reduce file size?",
      "format3": "How do I save or share formatted JSON?",
      
      "compare1": "How do I compare differences between two JSON objects?",
      "compare2": "What do the color codes in comparison results mean?",
      
      "convert1": "How do I convert JSON to CSV format?",
      "convert2": "How do I convert JSON to XML format?",
      "convert3": "How do I convert between YAML and JSON?",
      
      "validate1": "What is JSON Schema validation?",
      "validate2": "What should I do when I encounter validation errors?",
      
      "query1": "How do I use JSONPath to query JSON data?",
      "query2": "How do I create complex JSONPath queries?",
      
      "code1": "How do I generate code classes or interfaces from JSON?",
      "code2": "How do I handle property naming conventions?",
      
      "mock1": "How does the API Mocker work?",
      "mock2": "How do I create custom API mock responses?",
      
      "visualize1": "How do I visualize JSON data as charts?",
      
      "general1": "Are the JSON tools secure? Is my data sent to servers?",
      "general2": "How large of a JSON file can the tools handle?",
      
      "jwt1": "What is JWT and how does it work?",
      "jwt2": "What do the three parts of a JWT contain?",
      "jwt3": "How do I verify a JWT signature?",
      "jwt4": "When should I use JWT?"
    },
    
    "answers": {
      "format1": "Using our formatter tool, you can easily improve JSON readability. Simply paste your JSON into the input box and click the 'Format' button. You can also adjust the number of indent spaces to customize the formatting. The formatting process adds appropriate spacing, line breaks, and indentation to make nested structures clearly visible.",
      "format2": "To minify JSON (also known as compression), paste your JSON into the formatter tool and click the 'Minify' button. This removes all unnecessary whitespace, line breaks, and indentation, significantly reducing the file size for production use or network transmission.",
      "format3": "After formatting or minifying, you can click the 'Copy' button to copy the result to your clipboard or click the 'Download' button to save it as a file. To share, you can copy and send via email or messaging, or upload to code sharing platforms like GitHub Gist or Pastebin.",
      
      "compare1": "The compare tool makes it easy to find differences between two JSON objects. Paste the first JSON into the left input box and the second JSON into the right input box, then click the 'Compare' button. The tool will highlight added, removed, or modified parts and display the differences in a clear visual format.",
      "compare2": "In the comparison results, green indicates added content, red indicates removed content, and yellow indicates modified content. Each change is also accompanied by specific change type icons to help you quickly identify the type of difference.",
      
      "convert1": "To convert JSON to CSV format: 1) Select the 'JSON → CSV' option in the convert tool; 2) Paste your JSON data; 3) Configure options like whether to include headers, delimiter type, etc.; 4) Click the 'Convert' button. Note that JSON should be in array form, where each array item will be converted to a row in the CSV.",
      "convert2": "To convert JSON to XML: 1) Select the 'JSON → XML' option in the convert tool; 2) Paste your JSON data; 3) Choose whether to include XML headers; 4) Click the 'Convert' button. After conversion, JSON object properties become XML tags, and values become tag content or attributes.",
      "convert3": "Converting between YAML and JSON is simple: 1) Select the appropriate conversion direction ('JSON → YAML' or 'YAML → JSON'); 2) Paste your source data; 3) Click the 'Convert' button. YAML is more readable than JSON, especially for complex configuration files, while JSON is more commonly used for data exchange between programs.",
      
      "validate1": "JSON Schema validation is a method to ensure JSON data conforms to a predefined structure and rules. You can define property types, required fields, value ranges, and other constraints, and the validator will check whether your JSON meets these rules. This is useful for API interfaces, configuration files, or any scenario where data consistency needs to be guaranteed.",
      "validate2": "When encountering validation errors: 1) Read the error message carefully, it indicates where the problem is; 2) Check if the data type at the specified path is correct; 3) Ensure all required fields are provided; 4) Verify that values are within allowed ranges; 5) Check if special formats like dates or emails are correctly formatted. You can also use our built-in Schema templates to learn the correct Schema structure.",
      
      "query1": "JSONPath is a query language similar to XPath for XML. Basic usage: 1) `$` represents the root object; 2) `.property` accesses a property; 3) `[index]` accesses an array element; 4) `[*]` represents all array elements; 5) `..property` finds a property at any level; 6) `[?(@.property==value)]` filters based on conditions. For example, `$.store.book[*].title` will return all book titles.",
      "query2": "Creating complex queries: 1) Use filters like `$.store.book[?(@.price<10)]` to find books with price less than 10; 2) Combine multiple conditions like `$.store.book[?(@.price<10 && @.category=='fiction')]`; 3) Use `..` for recursive searches like `$..author` to find all authors; 4) Use wildcards like `$.store.book[*].[title,author]` to get titles and authors simultaneously.",
      
      "code1": "Using the Code Generator to convert JSON to code classes/interfaces: 1) Paste your JSON sample data; 2) Select the target language (TypeScript, Java, C#, etc.); 3) Set the root class name; 4) Configure options like whether to use interfaces, whether properties are optional, etc.; 5) Click 'Generate Code'. The generated code can be used directly in your project, saving significant time on manually creating data models.",
      "code2": "Our code generator supports multiple naming conventions: 1) camelCase (e.g., userName); 2) PascalCase (e.g., UserName); 3) snake_case (e.g., user_name). You can choose the appropriate naming style based on the conventions of your target language. Some languages like Java typically use camelCase, while C# prefers PascalCase.",
      
      "mock1": "The API Mocker allows you to create mock API endpoints without a real backend server. How it works: 1) Define an endpoint name and JSON Schema; 2) Set response parameters like delay, error rate, etc.; 3) Start the mock server; 4) Access the mock API through the generated URL. This is especially useful for frontend developers to develop and test when backend APIs are not yet complete.",
      "mock2": "Creating custom API mock responses: 1) Define your data structure in the Schema editor; 2) Use JSON Schema keywords like type, format, enum, etc. to control the type and range of generated data; 3) Set error rates to simulate occasional errors; 4) Configure response delay to simulate network latency; 5) Define custom response headers. You can also use our provided common data templates to get started quickly.",
      
      "visualize1": "To visualize JSON data as charts: 1) Paste JSON containing numerical data; 2) Select chart type (bar chart, line chart, pie chart, etc.); 3) Map data fields to chart axes (specify which fields to use for X-axis, Y-axis, etc.); 4) Enable multi-series data support if needed; 5) Click 'Generate Chart'. Visualization is particularly useful for analyzing data trends, comparing values, or presenting statistics.",
      
      "general1": "Yes, our tools run entirely in your browser, and your data is never sent to any server. All processing happens on your device, ensuring data privacy and security. Most functionalities continue to work even in offline mode. This makes the tool suitable for handling sensitive or confidential data.",
      "general2": "The size of JSON files our tools can handle is primarily limited by your browser and device memory. Typically, files of a few MB can be processed easily. For larger files (over 10MB), you may experience performance degradation. If you need to process very large JSON files, consider splitting them into smaller parts or using specialized desktop tools.",
      
      "jwt1": "JSON Web Token (JWT) is an open standard (RFC 7519) used for securely transmitting information between parties. It works like this: after a user authenticates, the server generates a JWT and returns it to the client, which sends it with subsequent requests. The server validates the token to confirm the user's identity without querying the database again. JWTs are compact, making them convenient for transmission in HTTP headers or URL parameters, particularly suitable for distributed systems and microservice architectures.",
      
      "jwt2": "A JWT consists of three parts separated by dots (.): 1) Header: Contains the token type and signing algorithm used, such as HMAC SHA256 or RSA; 2) Payload: Contains claims such as user ID, roles, expiration time, etc.; 3) Signature: Created using the algorithm specified in the header, combined with a secret key, to sign the encoded header and payload data. The header and payload parts are Base64Url encoded JSON, not encrypted, so anyone can decode to view the contents. The signature ensures the token hasn't been tampered with during transmission.",
      
      "jwt3": "Verifying a JWT signature is a crucial step for ensuring token security, involving: 1) Separating the JWT's three parts (header, payload, and signature); 2) Using the same key and algorithm used when the token was issued to recalculate the signature on the header and payload; 3) Comparing the calculated signature with the signature part of the JWT to check if they match; 4) Checking if the token has expired. With our JWT decoder, you can input the token and secret key to verify the signature. Additionally, you should check other important claims like issuer (iss), audience (aud), etc., to ensure the token is used in the correct application context.",
      
      "jwt4": "JWT is best suited for: 1) Authentication: After login, subsequent requests can include the JWT, allowing users to access routes, services, and resources permitted with that token; 2) Information Exchange: JWT is a good way to securely transmit information between parties as you can verify the sender's identity through signatures and ensure content hasn't been tampered with; 3) Stateless APIs: Allowing servers to be stateless, improving scalability. However, JWT isn't appropriate for all scenarios. For situations requiring immediate permission revocation, storing large amounts of data, or high-security requirements, consider other mechanisms or use in combination. Best practices include: using HTTPS, setting reasonable expiration times, not storing sensitive information in the payload, and handling keys carefully."
    },
    "shortDescription": "Find answers to common questions about JSON and our tools"
  },
  "categories": {
    "format": "Formatting",
    "compare": "Comparison",
    "convert": "Conversion",
    "validate": "Validation",
    "query": "Querying",
    "code": "Code Generation",
    "mock": "API Mocking",
    "visualize": "Visualization",
    "general": "General Questions",
    "jwt": "JWT Tokens"
  },
  "footer": {
    "description": "A comprehensive suite of JSON utilities for developers and data professionals.",
    "built": "Built with React, TypeScript, and Material-UI.",
    "copyright": "© {{year}} JSONGeeks. All rights reserved.",
    "tools": "Tools",
    "resources": "Resources",
    "documentation": "Documentation",
    "apiReference": "API Reference",
    "connect": "Connect with the Developer",
    "contactEmail": "Contact: contact@jsongeeks.dev",
    "sourceCode": "Source Code",
    "reportBug": "Report Bug",
    "privacy": "All tools on this site are client-side only. Your data never leaves your browser.",
    "privacyPolicy": "Privacy Policy",
    "termsOfUse": "Terms of Use"
  },
  "policy": {
    "privacyPolicy": {
      "title": "Privacy Policy",
      "dataProcessing": {
        "title": "Data Processing",
        "content": "All JSON data processing occurs entirely in your browser and is never sent to any server. We do not collect, store, or process any of the JSON data you upload or input."
      },
      "cookies": {
        "title": "Cookie Usage",
        "content": "This site only uses necessary local storage (localStorage) to remember your preference settings, such as dark/light theme selection and the last used tool tab. We do not use any tracking cookies or third-party analytics cookies."
      },
      "analytics": {
        "title": "Analytics",
        "content": "We may use basic analytics tools to collect anonymous usage data, such as visitor numbers and page views, to help us improve our tools. This data does not contain any personally identifiable information and is used solely for internal analysis purposes."
      },
      "thirdParty": {
        "title": "Third-Party Links",
        "content": "This site may contain links to third-party websites that have their own privacy policies and data handling practices. We are not responsible for the content or privacy practices of these third-party sites and recommend that you review their privacy policies."
      },
      "updates": {
        "title": "Policy Updates",
        "content": "This privacy policy may be updated periodically, and we encourage you to review it for changes. We will note the last updated date on the page but will not specifically notify you of each change."
      },
      "contact": {
        "title": "Contact Information",
        "content": "If you have any privacy-related questions, please contact us at: contact@jsongeeks.dev"
      },
      "lastUpdated": "Last updated: {{date}}"
    },
    "termsOfUse": {
      "title": "Terms of Use",
      "license": {
        "title": "License to Use",
        "content": "We grant you a non-exclusive license to access and use this tool. You may use this tool to process JSON data for personal or business purposes, but you may not redistribute, resell, or package the tool in whole or in part as another product."
      },
      "disclaimer": {
        "title": "Disclaimer",
        "content": "This tool is provided 'as is' without any warranty of any kind. We are not responsible for any data loss, damage, or other loss that may result from using this tool. Users assume all risk when using the tool and are responsible for their own data."
      },
      "intellectualProperty": {
        "title": "Intellectual Property",
        "content": "Unless otherwise noted, all content, code, design, and icons of this tool are the intellectual property of JSONGeeks. You may not copy, modify, distribute, or use this content except as expressly permitted by these terms or with our written permission."
      },
      "prohibitedActivities": {
        "title": "Prohibited Activities",
        "content": "When using this tool, you must not:",
        "items": [
          "Attempt to interfere with or disrupt the normal operation of the site",
          "Use automated tools to scrape or make excessive requests to the site",
          "Circumvent, disable, or otherwise interfere with security-related features of the site",
          "Use the tool to process or store illegal content",
          "Excessively consume server resources causing degraded experience for other users"
        ]
      },
      "termination": {
        "title": "Termination",
        "content": "We reserve the right to terminate or restrict your access to the service at any time, for any reason (including, but not limited to, violation of these Terms of Use), without notice."
      },
      "governingLaw": {
        "title": "Governing Law",
        "content": "These terms are governed by the laws of China, and any disputes related to this tool shall be submitted to the courts of China with jurisdiction."
      },
      "changes": {
        "title": "Changes to Terms",
        "content": "We reserve the right to modify these terms at any time. Significant changes will be notified on the site. Your continued use of this tool will be considered acceptance of the modified terms."
      },
      "lastUpdated": "Last updated: {{date}}"
    }
  },
  "common": {
    "copied": "{{content}} copied to clipboard!",
    "error": {
      "invalidJson": "Invalid JSON format",
      "emptyInput": "Please enter some {{content}} to {{action}}",
      "noData": "No {{content}} to download",
      "fileRead": "Failed to read file",
      "clipboard": "Failed to read from clipboard"
    },
    "close": "Close",
    "paste": "Paste",
    "clear": "Clear"
  },
  "share": {
    "title": "Share JSON Content",
    "description": "Create a shareable link containing your current JSON data and tool settings.",
    "buttonTooltip": "Share this JSON",
    "buttonAriaLabel": "Share",
    "linkLabel": "Share Link",
    "copy": "Copy",
    "copyLink": "Copy Link",
    "includeCurrent": "Include Current Content",
    "includeJson": "Include JSON Data",
    "includeSettings": "Include Tool Settings",
    "generateError": "Error generating share link",
    "linkCopied": "Share link copied to clipboard",
    "copyError": "Error copying to clipboard",
    "socialShare": "Share to Social Media",
    "socialText": "Check out this JSON data I processed with JSONGeeks",
    "emailSubject": "Shared JSON Data Link",
    "qrCodeInfo": "Or scan the QR code below to access on mobile devices"
  },
  "home": {
    "subtitle": "Comprehensive JSON Tools for Developers",
    "description": "A collection of free online tools for working with JSON data. Format, validate, convert, compare, visualize and query JSON with ease. No signup required.",
    "openApp": "Open All Tools",
    "availableTools": "Available Tools",
    "learnMore": "Learn More",
    "useTool": "Use Tool",
    "viewFaq": "View FAQ",
    "startNow": "Ready to Start?",
    "allToolsFree": "All tools are completely free to use, no signup required, and work directly in your browser.",
    "openAllTools": "Open App"
  },
  "landingPages": {
    "tryNow": "Try Now",
    "allTools": "View All Tools",
    "keyFeatures": "Key Features",
    "relatedTopics": "Related Topics",
    "readyToStart": "Ready to start using this tool?",
    "noSignup": "No signup required, all tools are free and work directly in your browser.",
    "startUsing": "Start Using {{tool}}",
    "backToHome": "Back to Home",
    "openTool": "Open Tool"
  },
  "jwtPage": {
    "decoder": "JWT Decoder",
    "encoder": "JWT Encoder"
  },
  "jwtEncoder": {
    "inputArea": "Input Area",
    "outputArea": "Output Area",
    "noOutput": "Please fill in Header, Payload, and Secret, then click Generate.",
    "header": "Header",
    "payload": "Payload",
    "secret": "Secret",
    "encode": "Generate JWT",
    "messages": {
      "encoded": "JWT generated successfully",
      "encodeError": "Failed to generate JWT, please check your input",
      "copied": "JWT copied to clipboard"
    }
  }
} 