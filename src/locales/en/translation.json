{
  "app": {
    "title": "JSON Tools - Comprehensive JSON Utilities",
    "description": "A comprehensive collection of JSON utilities for developers and data professionals. Format, validate, compare, convert, query, and visualize JSON data with these powerful online tools.",
    "header": "All-in-One JSON Tools Suite"
  },
  "theme": {
    "toggleLight": "Switch to Light Mode",
    "toggleDark": "Switch to Dark Mode",
    "toggle": "Toggle Theme"
  },
  "language": {
    "toggle": "Change Language",
    "english": "English",
    "chinese": "中文"
  },
  "tabs": {
    "format": "Format",
    "compare": "Compare",
    "convert": "Convert",
    "visualize": "Visualize",
    "validate": "Validate",
    "query": "Query",
    "codeGenerator": "Code Generator",
    "apiMocker": "API Mocker",
    "faq": "FAQ"
  },
  "format": {
    "title": "JSON Formatter & Beautifier",
    "description": "Format and beautify your JSON data with this easy-to-use tool. Improve readability with customizable indentation, validate JSON syntax, and quickly minify for production use. Upload from file or paste directly, then download or copy the formatted result.",
    "keywords": [
      "JSON formatter",
      "JSON beautifier",
      "JSON validator",
      "JSON minifier",
      "Indent JSON",
      "Format JSON",
      "Readable JSON",
      "JSON syntax"
    ],
    "indent": "Indent",
    "spaces": "{{count}} spaces",
    "format": "Format",
    "minify": "Minify",
    "download": "Download",
    "upload": "Upload",
    "enterJson": "Enter JSON...",
    "paste": "Paste",
    "copy": "Copy"
  },
  "compare": {
    "title": "JSON Diff & Compare Tool",
    "description": "Compare two JSON objects and visualize the differences. Perfect for API testing, debugging response variations, and tracking changes in JSON data structures. This tool provides a detailed list of additions, deletions, and modifications between JSON objects.",
    "keywords": [
      "JSON diff",
      "JSON compare",
      "JSON difference",
      "API testing",
      "Object comparison",
      "Data comparison",
      "JSON changes",
      "JSON delta"
    ],
    "firstJson": "Enter first JSON...",
    "secondJson": "Enter second JSON...",
    "compare": "Compare",
    "result": "Comparison result copied to clipboard!"
  },
  "convert": {
    "title": "JSON Converter - XML, CSV, YAML Conversion Tool",
    "description": "Convert JSON data to and from different formats including YAML, XML, and CSV. This versatile tool offers customizable options for indentation, headers, and data formatting to meet your specific conversion needs. Perfect for data migration, API integrations, and format transformations.",
    "keywords": [
      "JSON to YAML",
      "JSON to XML",
      "JSON to CSV",
      "YAML to JSON",
      "Format conversion",
      "Data transformation",
      "API integration",
      "Data export"
    ],
    "jsonToYaml": "JSON → YAML",
    "yamlToJson": "YAML → JSON",
    "jsonToXml": "JSON → XML",
    "jsonToCsv": "JSON → CSV",
    "options": "Conversion Options",
    "prettyPrint": "Pretty Print",
    "xmlHeader": "XML Header",
    "includeHeader": "Include Header",
    "flattenObjects": "Flatten Objects",
    "delimiter": "Delimiter",
    "enterJson": "Enter JSON...",
    "enterYaml": "Enter YAML...",
    "convert": "Convert",
    "result": "Converted output copied to clipboard!"
  },
  "visualize": {
    "title": "JSON Visualization Tool",
    "description": "Visualize your JSON data with interactive charts. Transform complex data structures into insightful visual representations. Support for bar charts, line charts, pie charts, and more - perfect for data analysis and presentation.",
    "keywords": [
      "JSON visualization",
      "Data visualization",
      "JSON charts",
      "Data charts",
      "JSON graphs",
      "Data presentation",
      "API visualization",
      "JSON data analysis"
    ],
    "jsonData": "JSON Data",
    "enterJson": "Enter JSON data here...",
    "loadExample": "Load Examples",
    "examples": "Example Data:",
    "exampleData": {
      "example1": "Example 1 - Simple Data",
      "example2": "Example 2 - Multi-series Data",
      "example3": "Example 3 - Nested Data"
    },
    "visualize": "Generate Chart",
    "chartUpdated": "Chart updated",
    "chartOptions": "Chart Configuration",
    "chartType": "Chart Type",
    "barChart": "Bar Chart",
    "lineChart": "Line Chart",
    "pieChart": "Pie Chart",
    "donutChart": "Donut Chart",
    "areaChart": "Area Chart",
    "stackedBarChart": "Stacked Bar Chart",
    "scatterChart": "Scatter Plot",
    "radarChart": "Radar Chart",
    "treemapChart": "Treemap Chart",
    "xAxisField": "X-Axis Field",
    "yAxisField": "Y-Axis Field",
    "colorField": "Color Field",
    "category": "category",
    "numeric": "numeric",
    "enableMultiSeries": "Enable Multi-series",
    "multiSeriesEnabled": "Multi-series Enabled",
    "selectDataSeries": "Select Data Series",
    "selectFields": "Please select X and Y fields",
    "selectSeries": "Please select at least one data series",
    "noDataPoints": "No valid data points to visualize",
    "chart": "Chart Results"
  },
  "validate": {
    "title": "JSON Schema Validator",
    "description": "Validate your JSON data against JSON Schema to ensure data integrity and structure. This tool helps developers verify that JSON payloads conform to predefined schemas, catching errors and ensuring data quality before integration or API usage.",
    "keywords": [
      "JSON validation",
      "Schema validation", 
      "API testing",
      "Data validation",
      "JSON Schema",
      "JSON format",
      "Data integrity"
    ],
    "jsonData": "JSON Data",
    "jsonSchema": "JSON Schema",
    "dataExamples": "Data Examples",
    "schemaTemplates": "Schema Templates",
    "selectExample": "Select an example",
    "selectTemplate": "Select a template",
    "enterJsonData": "Enter JSON data...",
    "enterJsonSchema": "Enter JSON Schema...",
    "validate": "Validate",
    "validResult": "Validation Passed",
    "invalidResult": "Validation Failed",
    "errorsFound": "Found {{count}} errors",
    "atPath": "At path:",
    "errorDetails": "Error Details",
    "errorType": "Error Type",
    "path": "Path",
    "message": "Message",
    "receivedValue": "Received Value",
    "expectedSchema": "Expected Schema",
    "enterBoth": "Please enter both JSON data and schema",
    "jsonValid": "JSON is valid according to the schema!",
    "jsonInvalid": "JSON is invalid according to the schema",
    "invalidValue": "Invalid value",
    "invalidFormat": "Invalid JSON or schema format",
    "templateDataLoaded": "Schema template and matching example data loaded: {{name}}",
    "templateLoaded": "Schema template loaded",
    "dataTemplateLoaded": "Example data and matching schema template loaded: {{name}}",
    "dataLoaded": "Example data loaded",
    "validationResult": "validation result",
    "learnJsonSchema": "Learn JSON Schema",
    "schemaDescription": "JSON Schema is a declarative language for validating JSON data. You can define the format, required fields, and data types, then validate whether JSON data meets these rules.",
    "documentation": "Documentation",
    "tutorial": "Tutorial",
    "templateExamples": {
      "genericObject": "Generic Object",
      "userList": "User List",
      "configObject": "Configuration Object"
    }
  },
  "query": {
    "title": "JSONPath Query Tool - Extract Data from JSON",
    "description": "Query and extract specific data from complex JSON structures using JSONPath expressions. This powerful tool allows you to navigate and filter JSON data with precise path syntax, ideal for API response analysis, data extraction, and JSON processing workflows.",
    "keywords": [
      "JSONPath",
      "JSON query",
      "JSON extraction",
      "JSON filter",
      "JSON navigator",
      "API response parser",
      "JSON data select",
      "Path expressions"
    ],
    "guide": {
      "title": "JSONPath Quick Guide",
      "showGuide": "Show Guide",
      "hideGuide": "Hide Guide",
      "loadExample": "Load Test Data",
      "try": "Click on any example below to try it out",
      "dataStructure": "Example Data Structure:",
      "syntax": "JSONPath Syntax Reference:",
      "root": "Represents the root object",
      "child": "Represents child elements, e.g., $.store.book accesses the book property under store",
      "array": "Accesses the nth element of an array, e.g., $.store.book[0] accesses the first book",
      "allItems": "Represents all elements in an array, e.g., $.store.book[*].title returns all book titles",
      "filter": "Filters elements based on conditions, e.g., $.store.book[?(@.price<10)] returns books with price less than 10",
      "returnRoot": "Returns the entire JSON object",
      "returnStore": "Returns the store object and all its contents",
      "returnAllBooks": "Returns all objects in the books array",
      "returnFirstBook": "Returns all information about the first book",
      "returnAllTitles": "Returns all book titles, e.g., [\"Harry Potter\",...]",
      "returnInStock": "Returns all books where inStock is true"
    },
    "examples": "Try These Examples",
    "example1": "Get entire data",
    "example2": "Get store object",
    "example3": "Get all books",
    "example4": "Get first book",
    "example5": "Get second book",
    "example6": "Get first book title",
    "example7": "Get all book titles",
    "example8": "Get all book authors",
    "example9": "Get in-stock books",
    "example10": "Get books over $10",
    "example11": "Get books under $10",
    "example12": "Get bicycle details",
    "example13": "Get store location",
    "jsonData": "JSON Data",
    "jsonPath": "JSONPath Query",
    "executeQuery": "Execute Query",
    "results": "Query Results",
    "type": "Type",
    "recentQueries": "Recent Queries",
    "noResults": "No results found",
    "invalidQuery": "Invalid JSON or query format"
  },
  "codeGenerator": {
    "title": "JSON to Code Generator",
    "description": "Generate programming language code from JSON data. Instantly convert JSON into classes, interfaces, or models in TypeScript, Java, C#, Python, Go, or Swift. Save time on data model creation with customizable options for property names, types, and annotations.",
    "keywords": [
      "JSON to code",
      "Code generator",
      "TypeScript interface",
      "Java class",
      "C# model",
      "Python class",
      "Swift struct",
      "Go struct",
      "Data model",
      "JSON deserialize"
    ],
    "targetLanguage": "Target Language",
    "rootClassName": "Root Class Name",
    "generate": "Generate Code",
    "upload": "Upload JSON",
    "options": "Code Generation Options",
    "useInterfaces": "Use Interfaces",
    "useClasses": "Use Classes",
    "optionalProps": "Optional Properties",
    "requiredProps": "Required Properties",
    "useJsonAnnotations": "Use JSON Annotations",
    "noJsonAnnotations": "No JSON Annotations",
    "jsonInput": "JSON Input",
    "generatedCode": "Generated Code",
    "noCodeGenerated": "No code has been generated yet. Enter JSON data and click Generate."
  },
  "apiMocker": {
    "title": "API Mocker - Create Mock API Responses",
    "description": "Create mock API responses based on JSON Schema. Define response delay, error rate, and other parameters to simulate real-world API behavior. Perfect for frontend developers working with APIs that aren't yet complete or available.",
    "keywords": [
      "API mocking",
      "Mock server",
      "API testing",
      "Frontend development",
      "JSON Schema",
      "API simulation",
      "Fake API",
      "Backend simulation"
    ],
    "labels": {
      "endpoints": "API Endpoints",
      "selectEndpoint": "Select Endpoint",
      "createEndpoint": "Create New Endpoint",
      "editEndpoint": "Edit Endpoint",
      "endpointName": "Endpoint Name",
      "jsonSchema": "JSON Schema",
      "mockResult": "Mock API Response",
      "responseSettings": "Response Settings",
      "delay": "Response Delay",
      "errorRate": "Error Rate",
      "successStatus": "Success Status Code",
      "errorStatus": "Error Status Code",
      "enabled": "Enabled",
      "disabled": "Disabled",
      "mockServer": "Mock Server",
      "serverPort": "Server Port",
      "headers": "Response Headers",
      "availableEndpoints": "Available Endpoints",
      "schemaExamples": "Schema Examples",
      "responsePreview": "Response Preview",
      "statusCode": "Status Code"
    },
    "buttons": {
      "saveEndpoint": "Save Endpoint",
      "generateMock": "Generate Mock Response",
      "copyMock": "Copy Response",
      "newEndpoint": "New Endpoint",
      "startServer": "Start Mock Server",
      "stopServer": "Stop Server"
    },
    "placeholders": {
      "enterSchema": "Enter JSON Schema here...",
      "enterEndpointName": "e.g., users, products, etc."
    },
    "messages": {
      "endpointCreated": "Endpoint created successfully",
      "endpointUpdated": "Endpoint updated successfully",
      "endpointDeleted": "Endpoint deleted",
      "dataCopied": "Mock response copied to clipboard",
      "serverStarted": "Mock server started on port {{port}}",
      "serverStopped": "Mock server stopped",
      "serverRunning": "Server running at http://localhost:{{port}}",
      "noEndpoints": "No endpoints defined yet. Create one using the form below.",
      "noMockData": "No mock data generated yet. Enter JSON Schema and click Generate.",
      "noEnabledEndpoints": "No enabled endpoints. Please enable at least one endpoint.",
      "schemaExampleLoaded": "{{name}} example schema loaded",
      "noPreviewData": "Unable to generate preview data"
    },
    "errors": {
      "nameRequired": "Endpoint name is required",
      "invalidSchema": "Invalid JSON Schema format",
      "saveFailed": "Failed to save endpoint",
      "generationFailed": "Failed to generate mock data",
      "noDataToCopy": "No mock data to copy",
      "invalidPastedSchema": "Invalid JSON format in pasted content",
      "serverStartFailed": "Failed to start mock server",
      "loadExampleFailed": "Failed to load example"
    },
    "examples": {
      "user": "User Profile",
      "product": "Product Catalog",
      "order": "Order Details",
      "weather": "Weather Forecast"
    }
  },
  "faq": {
    "title": "JSON Tools - Frequently Asked Questions",
    "description": "Find answers to common questions about JSON and our tools. This FAQ page provides detailed guides, troubleshooting tips, and best practices to help you work more effectively with JSON data and our suite of tools.",
    "searchPlaceholder": "Search FAQ...",
    "searchResults": "Found {{count}} results",
    "quickLinks": "Quick Links",
    "additionalResources": "Additional Resources",
    "resourcesDescription": "The following resources provide more in-depth information about JSON and related technologies:",
    "jsonSpecification": "JSON Specification",
    "jsonSchemaDoc": "JSON Schema Documentation",
    "jsonPathDoc": "JSONPath Syntax Guide",
    
    "questions": {
      "format1": "How do I format JSON to improve readability?",
      "format2": "How can I minify JSON to reduce file size?",
      "format3": "How do I save or share formatted JSON?",
      
      "compare1": "How do I compare differences between two JSON objects?",
      "compare2": "What do the color codes in comparison results mean?",
      
      "convert1": "How do I convert JSON to CSV format?",
      "convert2": "How do I convert JSON to XML format?",
      "convert3": "How do I convert between YAML and JSON?",
      
      "validate1": "What is JSON Schema validation?",
      "validate2": "What should I do when I encounter validation errors?",
      
      "query1": "How do I use JSONPath to query JSON data?",
      "query2": "How do I create complex JSONPath queries?",
      
      "code1": "How do I generate code classes or interfaces from JSON?",
      "code2": "How do I handle property naming conventions?",
      
      "mock1": "How does the API Mocker work?",
      "mock2": "How do I create custom API mock responses?",
      
      "visualize1": "How do I visualize JSON data as charts?",
      
      "general1": "Are the JSON tools secure? Is my data sent to servers?",
      "general2": "How large of a JSON file can the tools handle?"
    },
    
    "answers": {
      "format1": "Using our formatter tool, you can easily improve JSON readability. Simply paste your JSON into the input box and click the 'Format' button. You can also adjust the number of indent spaces to customize the formatting. The formatting process adds appropriate spacing, line breaks, and indentation to make nested structures clearly visible.",
      "format2": "To minify JSON (also known as compression), paste your JSON into the formatter tool and click the 'Minify' button. This removes all unnecessary whitespace, line breaks, and indentation, significantly reducing the file size for production use or network transmission.",
      "format3": "After formatting or minifying, you can click the 'Copy' button to copy the result to your clipboard or click the 'Download' button to save it as a file. To share, you can copy and send via email or messaging, or upload to code sharing platforms like GitHub Gist or Pastebin.",
      
      "compare1": "The compare tool makes it easy to find differences between two JSON objects. Paste the first JSON into the left input box and the second JSON into the right input box, then click the 'Compare' button. The tool will highlight added, removed, or modified parts and display the differences in a clear visual format.",
      "compare2": "In the comparison results, green indicates added content, red indicates removed content, and yellow indicates modified content. Each change is also accompanied by specific change type icons to help you quickly identify the type of difference.",
      
      "convert1": "To convert JSON to CSV format: 1) Select the 'JSON → CSV' option in the convert tool; 2) Paste your JSON data; 3) Configure options like whether to include headers, delimiter type, etc.; 4) Click the 'Convert' button. Note that JSON should be in array form, where each array item will be converted to a row in the CSV.",
      "convert2": "To convert JSON to XML: 1) Select the 'JSON → XML' option in the convert tool; 2) Paste your JSON data; 3) Choose whether to include XML headers; 4) Click the 'Convert' button. After conversion, JSON object properties become XML tags, and values become tag content or attributes.",
      "convert3": "Converting between YAML and JSON is simple: 1) Select the appropriate conversion direction ('JSON → YAML' or 'YAML → JSON'); 2) Paste your source data; 3) Click the 'Convert' button. YAML is more readable than JSON, especially for complex configuration files, while JSON is more commonly used for data exchange between programs.",
      
      "validate1": "JSON Schema validation is a method to ensure JSON data conforms to a predefined structure and rules. You can define property types, required fields, value ranges, and other constraints, and the validator will check whether your JSON meets these rules. This is useful for API interfaces, configuration files, or any scenario where data consistency needs to be guaranteed.",
      "validate2": "When encountering validation errors: 1) Read the error message carefully, it indicates where the problem is; 2) Check if the data type at the specified path is correct; 3) Ensure all required fields are provided; 4) Verify that values are within allowed ranges; 5) Check if special formats like dates or emails are correctly formatted. You can also use our built-in Schema templates to learn the correct Schema structure.",
      
      "query1": "JSONPath is a query language similar to XPath for XML. Basic usage: 1) `$` represents the root object; 2) `.property` accesses a property; 3) `[index]` accesses an array element; 4) `[*]` represents all array elements; 5) `..property` finds a property at any level; 6) `[?(@.property==value)]` filters based on conditions. For example, `$.store.book[*].title` will return all book titles.",
      "query2": "Creating complex queries: 1) Use filters like `$.store.book[?(@.price<10)]` to find books with price less than 10; 2) Combine multiple conditions like `$.store.book[?(@.price<10 && @.category=='fiction')]`; 3) Use `..` for recursive searches like `$..author` to find all authors; 4) Use wildcards like `$.store.book[*].[title,author]` to get titles and authors simultaneously.",
      
      "code1": "Using the Code Generator to convert JSON to code classes/interfaces: 1) Paste your JSON sample data; 2) Select the target language (TypeScript, Java, C#, etc.); 3) Set the root class name; 4) Configure options like whether to use interfaces, whether properties are optional, etc.; 5) Click 'Generate Code'. The generated code can be used directly in your project, saving significant time on manually creating data models.",
      "code2": "Our code generator supports multiple naming conventions: 1) camelCase (e.g., userName); 2) PascalCase (e.g., UserName); 3) snake_case (e.g., user_name). You can choose the appropriate naming style based on the conventions of your target language. Some languages like Java typically use camelCase, while C# prefers PascalCase.",
      
      "mock1": "The API Mocker allows you to create mock API endpoints without a real backend server. How it works: 1) Define an endpoint name and JSON Schema; 2) Set response parameters like delay, error rate, etc.; 3) Start the mock server; 4) Access the mock API through the generated URL. This is especially useful for frontend developers to develop and test when backend APIs are not yet complete.",
      "mock2": "Creating custom API mock responses: 1) Define your data structure in the Schema editor; 2) Use JSON Schema keywords like type, format, enum, etc. to control the type and range of generated data; 3) Set error rates to simulate occasional errors; 4) Configure response delay to simulate network latency; 5) Define custom response headers. You can also use our provided common data templates to get started quickly.",
      
      "visualize1": "To visualize JSON data as charts: 1) Paste JSON containing numerical data; 2) Select chart type (bar chart, line chart, pie chart, etc.); 3) Map data fields to chart axes (specify which fields to use for X-axis, Y-axis, etc.); 4) Enable multi-series data support if needed; 5) Click 'Generate Chart'. Visualization is particularly useful for analyzing data trends, comparing values, or presenting statistics.",
      
      "general1": "Yes, our tools run entirely in your browser, and your data is never sent to any server. All processing happens on your device, ensuring data privacy and security. Most functionalities continue to work even in offline mode. This makes the tool suitable for handling sensitive or confidential data.",
      "general2": "The size of JSON files our tools can handle is primarily limited by your browser and device memory. Typically, files of a few MB can be processed easily. For larger files (over 10MB), you may experience performance degradation. If you need to process very large JSON files, consider splitting them into smaller parts or using specialized desktop tools."
    }
  },
  "categories": {
    "format": "Formatting",
    "compare": "Comparison",
    "convert": "Conversion",
    "validate": "Validation",
    "query": "Querying",
    "code": "Code Generation",
    "mock": "API Mocking",
    "visualize": "Visualization",
    "general": "General Questions"
  },
  "footer": {
    "description": "A comprehensive suite of JSON utilities for developers and data professionals.",
    "built": "Built with React, TypeScript, and Material-UI.",
    "copyright": "© {{year}} JSON Tools. All rights reserved.",
    "tools": "Tools",
    "resources": "Resources",
    "documentation": "Documentation",
    "apiReference": "API Reference",
    "connect": "Connect with the Developer",
    "contactEmail": "Contact: your.email@example.com",
    "sourceCode": "Source Code",
    "reportBug": "Report Bug",
    "privacy": "All tools on this site are client-side only. Your data never leaves your browser.",
    "privacyPolicy": "Privacy Policy",
    "termsOfUse": "Terms of Use"
  },
  "common": {
    "copied": "{{content}} copied to clipboard!",
    "error": {
      "invalidJson": "Invalid JSON format",
      "emptyInput": "Please enter some {{content}} to {{action}}",
      "noData": "No {{content}} to download",
      "fileRead": "Failed to read file",
      "clipboard": "Failed to read from clipboard"
    },
    "close": "Close"
  },
  "share": {
    "title": "Share JSON Content",
    "description": "Create a shareable link containing your current JSON data and tool settings.",
    "buttonTooltip": "Share this JSON",
    "buttonAriaLabel": "Share",
    "linkLabel": "Share Link",
    "copy": "Copy",
    "copyLink": "Copy Link",
    "includeCurrent": "Include Current Content",
    "includeJson": "Include JSON Data",
    "includeSettings": "Include Tool Settings",
    "generateError": "Error generating share link",
    "linkCopied": "Share link copied to clipboard",
    "copyError": "Error copying to clipboard",
    "socialShare": "Share to Social Media",
    "socialText": "Check out this JSON data I processed with JSON Tools",
    "emailSubject": "Shared JSON Data Link",
    "qrCodeInfo": "Or scan the QR code below to access on mobile devices"
  }
} 